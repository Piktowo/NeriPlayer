name: Android CI
"on":
  workflow_dispatch:
jobs:
  build:
    if: github.ref == 'refs/heads/7zz'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
      - name: 恢复签名文件
        env:
          KEYSTORE_B64: ${{ secrets.KEYSTORE_B64 }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p app
          echo "$KEYSTORE_B64" | base64 -d > app/neri.jks
          test -s app/neri.jks
      - name: 写入 keystore.properties
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "storeFile=app/neri.jks"
            echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}"
            echo "keyAlias=${{ secrets.KEY_ALIAS }}"
            echo "keyPassword=${{ secrets.KEY_PASSWORD }}"
          } > keystore.properties
      - name: 准备 Gradle
        shell: bash
        run: chmod +x gradlew
      - name: 构建 Release
        env:
          KS_PWD: ${{ secrets.KEYSTORE_PASSWORD }}
          ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PWD: ${{ secrets.KEY_PASSWORD }}
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew clean :app:assembleRelease             -Pandroid.injected.signing.store.file="$PWD/app/neri.jks"             -Pandroid.injected.signing.store.password="$KS_PWD"             -Pandroid.injected.signing.key.alias="$ALIAS"             -Pandroid.injected.signing.key.password="$KEY_PWD"             --stacktrace
      - name: Package APK as zip
        id: pack
        run: |
          set -euo pipefail
          mkdir -p out
          APK_PATH="$(ls -1 app/build/outputs/apk/release/*-*.apk 2>/dev/null | head -n1 || true)"
          if [ -z "${APK_PATH}" ]; then
            echo "No APK found under app/build/outputs/apk/release" >&2
            exit 1
          fi
          ZIP_PATH="out/app-apk.zip"
          rm -f "${ZIP_PATH}"
          zip -j "${ZIP_PATH}" "${APK_PATH}"
          echo "apk_path=${APK_PATH}" >> $GITHUB_OUTPUT
          echo "zip_path=${ZIP_PATH}" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-apk
          path: out/app-apk.zip
          if-no-files-found: error
          compression-level: 9
          retention-days: 7

      - name: Telegram Notify (file upload + buttons)
        if: ${{ success() }}
        env:
          TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          CAPTION: ${{ github.repository }} | ${{ github.ref_name }} | ${{ github.sha }}
          ZIP_PATH: ${{ steps.pack.outputs.zip_path }}
          APK_PATH: ${{ steps.pack.outputs.apk_path }}
          RUN_ID: ${{ github.run_id }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          API="https://api.telegram.org/bot${TOKEN}"
          caption="${CAPTION}"
          sent=0
          if [ -n "${ZIP_PATH:-}" ] && [ -f "${ZIP_PATH}" ]; then
            curl -sS --fail-with-body -F chat_id="${CHAT_ID}" -F "caption=${caption}" -F "document=@${ZIP_PATH};type=application/zip" "${API}/sendDocument" >/dev/null && sent=1
          elif [ -n "${APK_PATH:-}" ] && [ -f "${APK_PATH}" ]; then
            curl -sS --fail-with-body -F chat_id="${CHAT_ID}" -F "caption=${caption}" -F "document=@${APK_PATH};type=application/vnd.android.package-archive" "${API}/sendDocument" >/dev/null && sent=1
          fi
          if [ $sent -eq 1 ]; then
            artifact_url="https://github.com/${REPO}/actions/runs/${RUN_ID}#artifacts"
            run_url="https://github.com/${REPO}/actions/runs/${RUN_ID}"
            if command -v jq >/dev/null 2>&1; then
              btn_payload=$(jq -n --arg art "$artifact_url" --arg run "$run_url" '{inline_keyboard:[[{"text":"⬇️ 下载产物","url":$art},{"text":"🔗 查看构建","url":$run}]]}')
            else
              btn_payload='{"inline_keyboard":[[{"text":"⬇️ 下载产物","url":"'"$artifact_url"'"},{"text":"🔗 查看构建","url":"'"$run_url"'"}]]}'
            fi
            curl -sS --fail-with-body -X POST "${API}/sendMessage" -d chat_id="${CHAT_ID}" -d text="📦 构建产物与运行信息" -d parse_mode="HTML" -d reply_markup="$btn_payload" >/dev/null
          fi

      - name: Telegram Notify (failure)
        if: ${{ failure() }}
        env:
          TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          REPO: ${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
          ACTOR: ${{ github.actor }}
          RUN_ID: ${{ github.run_id }}
        run: |
          set -euo pipefail
          nl=$'\n'
          msg="❌ 构建失败${nl}📦 仓库: ${REPO}${nl}🌿 分支: ${BRANCH}${nl}🧑‍💻 提交者: ${ACTOR}${nl}🔗 https://github.com/${REPO}/actions/runs/${RUN_ID}"
          curl -sS --fail-with-body -X POST "https://api.telegram.org/bot${TOKEN}/sendMessage" -d chat_id="${CHAT_ID}" -d text="${msg}"
