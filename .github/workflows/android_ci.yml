name: Android CI
on:
  workflow_dispatch:
jobs:
  build:
    if: github.ref == 'refs/heads/7zz'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
      - name: 恢复签名文件
        env:
          KEYSTORE_B64: ${{ secrets.KEYSTORE_B64 }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p app
          echo "$KEYSTORE_B64" | base64 -d > app/neri.jks
          test -s app/neri.jks
      - name: 写入 keystore.properties
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "storeFile=app/neri.jks"
            echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}"
            echo "keyAlias=${{ secrets.KEY_ALIAS }}"
            echo "keyPassword=${{ secrets.KEY_PASSWORD }}"
          } > keystore.properties
      - name: 准备 Gradle
        shell: bash
        run: chmod +x gradlew
      - name: 构建 Release
        env:
          KS_PWD: ${{ secrets.KEYSTORE_PASSWORD }}
          ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PWD: ${{ secrets.KEY_PASSWORD }}
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew clean :app:assembleRelease             -Pandroid.injected.signing.store.file="$PWD/app/neri.jks"             -Pandroid.injected.signing.store.password="$KS_PWD"             -Pandroid.injected.signing.key.alias="$ALIAS"             -Pandroid.injected.signing.key.password="$KEY_PWD"             --stacktrace
      - name: 定位 app-release.zip 并解压出 APK
        id: fromzip
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v unzip >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y unzip
          fi
          ZIP_PATH=""
          for pat in "app-release.zip" "*release*.zip" "*NeriPlayer*.zip"; do
            z=$(find . -type f -name "$pat" | head -n 1 || true)
            if [ -n "$z" ]; then ZIP_PATH="$z"; break; fi
          done
          if [ -z "$ZIP_PATH" ]; then
            APK=$(find app -type f -name "*.apk" | sort | head -n 1 || true)
            if [ -n "$APK" ]; then
              APK=$(realpath "$APK")
              echo "apk_path=$APK" >> "$GITHUB_OUTPUT"
              echo "zip_path=" >> "$GITHUB_OUTPUT"
              exit 0
            fi
            echo "既未找到 zip 也未找到 apk" >&2
            exit 1
          fi
          ZIP_PATH=$(realpath "$ZIP_PATH")
          echo "zip_path=$ZIP_PATH" >> "$GITHUB_OUTPUT"
          WORKDIR=$(mktemp -d)
          unzip -q -o "$ZIP_PATH" -d "$WORKDIR"
          APK=""
          APK=$(find "$WORKDIR" -type f -name 'NeriPlayer-*.apk' -exec stat -c '%s %n' {} + | sort -nr | head -n1 | cut -d' ' -f2- || true)
          if [ -z "$APK" ]; then
            APK=$(find "$WORKDIR" -type f -name '*.apk' -exec stat -c '%s %n' {} + | sort -nr | head -n1 | cut -d' ' -f2- || true)
          fi
          if [ -z "$APK" ]; then
            echo "ZIP 内未找到 APK" >&2
            exit 1
          fi
          APK=$(realpath "$APK")
          echo "apk_path=$APK" >> "$GITHUB_OUTPUT"
      - name: 上传 APK 构建产物
        if: steps.fromzip.outputs.apk_path != ''
        uses: actions/upload-artifact@v4
        with:
          name: app-apk
          path: ${{ steps.fromzip.outputs.apk_path }}
      - name: 上传 ZIP 构建产物（如果存在）
        if: steps.fromzip.outputs.zip_path != ''
        uses: actions/upload-artifact@v4
        with:
          name: app-zip
          path: ${{ steps.fromzip.outputs.zip_path }}
      - name: Telegram 通知（高亮版 + 按钮）
        if: steps.fromzip.outputs.apk_path != ''
        env:
          TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          APK_PATH: ${{ steps.fromzip.outputs.apk_path }}
          ZIP_PATH: ${{ steps.fromzip.outputs.zip_path }}
          SHA: ${{ github.sha }}
          REPO: ${{ github.repository }}
          ACTOR: ${{ github.actor }}
          BRANCH: ${{ github.ref_name }}
          RUN_ID: ${{ github.run_id }}
        shell: bash
        run: |
          set -euo pipefail
          BYTES=$(stat -c%s "$APK_PATH")
          APK_MB=$(awk "BEGIN{printf "%.1f", $BYTES/1024/1024}")
          SHORT_SHA="${SHA:0:7}"
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if [ -z "$COMMIT_MSG" ]; then COMMIT_MSG="$(git log -1 --pretty=%s 2>/dev/null || echo '手动触发构建')"; fi
          COMMIT_URL="https://github.com/${REPO}/commit/${SHA}"
          RUN_URL="https://github.com/${REPO}/actions/runs/${RUN_ID}"
          html_escape() { sed -e 's/&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g'; }
          COMMIT_MSG_ESC="$(printf '%s' "$COMMIT_MSG" | html_escape | head -c 900)"
          if [ "${#COMMIT_MSG_ESC}" -ge 900 ]; then COMMIT_MSG_ESC="${COMMIT_MSG_ESC}…"; fi
          FANCY_NAME="NeriPlayer-${SHORT_SHA}.apk"
          caption="<b>🚀 NeriPlayer ${SHORT_SHA}</b>\n<code>${APK_MB} MB APK</code>\n\n<b>✅ 构建成功</b>\n<b>📦 仓库：</b>${REPO}\n<b>🌿 分支：</b>${BRANCH}\n<b>👤 提交者：</b>${ACTOR}\n\n<b>🧾 提交说明：</b>\n<pre><code>ฅ՞•ﻌ•՞ฅ\n${COMMIT_MSG_ESC}\n</code></pre>"
          reply='{"inline_keyboard":[
            [{"text":"🔗 提交详情","url":"'"$COMMIT_URL"'"}],
            [{"text":"📃 Actions 运行","url":"'"$RUN_URL"'"}]
          ]}'
          set +e
          curl -sS --fail-with-body -X POST "https://api.telegram.org/bot${TOKEN}/sendDocument"             -F chat_id="${CHAT_ID}"             -F parse_mode="HTML"             -F "reply_markup=${reply}"             -F "document=@-;filename=${FANCY_NAME};type=application/vnd.android.package-archive"             -F caption="${caption}" < "$APK_PATH"
          rc=$?
          set -e
          if [ $rc -ne 0 ]; then
            if [ -n "${ZIP_PATH:-}" ] && [ -f "${ZIP_PATH:-}" ]; then
              curl -sS --fail-with-body -X POST "https://api.telegram.org/bot${TOKEN}/sendDocument"                 -F chat_id="${CHAT_ID}"                 -F parse_mode="HTML"                 -F "reply_markup=${reply}"                 -F "document=@${ZIP_PATH};type=application/zip"                 -F caption="${caption}"
            else
              exit 1
            fi
          fi
      - name: Telegram 通知失败
        if: failure()
        env:
          TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          SHA: ${{ github.sha }}
          REPO: ${{ github.repository }}
          ACTOR: ${{ github.actor }}
          BRANCH: ${{ github.ref_name }}
          RUN_ID: ${{ github.run_id }}
        shell: bash
        run: |
          set -euo pipefail
          nl=$'\n'
          msg="❌ 构建失败${nl}📦 仓库: ${REPO}${nl}🌿 分支: ${BRANCH}${nl}👤 触发者: ${ACTOR}${nl}🔗 https://github.com/${REPO}/actions/runs/${RUN_ID}"
          curl -sS "https://api.telegram.org/bot${TOKEN}/sendMessage"             -d chat_id="${CHAT_ID}"             -d text="${msg}"
