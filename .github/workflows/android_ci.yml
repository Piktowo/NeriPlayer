name: Android CI
on:
  workflow_dispatch:
jobs:
  build:
    if: github.ref == 'refs/heads/7zz'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: 恢复签名文件
        env:
          KEYSTORE_B64: ${{ secrets.KEYSTORE_B64 }}
        run: |
          set -euo pipefail
          mkdir -p app
          echo "$KEYSTORE_B64" | base64 -d > app/neri.jks
          test -s app/neri.jks

      - name: 写入 keystore.properties
        run: |
          set -euo pipefail
          {
            echo "storeFile=app/neri.jks"
            echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}"
            echo "keyAlias=${{ secrets.KEY_ALIAS }}"
            echo "keyPassword=${{ secrets.KEY_PASSWORD }}"
          } > keystore.properties

      - run: chmod +x gradlew

      - name: 构建 Release
        env:
          KS_PWD: ${{ secrets.KEYSTORE_PASSWORD }}
          ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PWD: ${{ secrets.KEY_PASSWORD }}
        run: |
          set -euo pipefail
          ./gradlew clean :app:assembleRelease             -Pandroid.injected.signing.store.file="$PWD/app/neri.jks"             -Pandroid.injected.signing.store.password="$KS_PWD"             -Pandroid.injected.signing.key.alias="$ALIAS"             -Pandroid.injected.signing.key.password="$KEY_PWD"             --stacktrace

      - name: 定位 app-release.zip 并解压出 APK
        id: fromzip
        run: |
          set -euo pipefail
          if ! command -v unzip >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y unzip
          fi

          ZIP_PATH=""
          for pat in "app-release.zip" "*release*.zip" "*NeriPlayer*.zip"; do
            z=$(find . -type f -name "$pat" | head -n 1 || true)
            if [ -n "$z" ]; then ZIP_PATH="$z"; break; fi
          done

          if [ -z "$ZIP_PATH" ]; then
            echo "未找到 zip 包，尝试直接在项目中寻找 APK …"
            APK=$(find app -type f -name "*.apk" | sort | head -n 1 || true)
            if [ -n "$APK" ]; then
              APK=$(realpath "$APK")
              echo "apk_path=$APK" >> "$GITHUB_OUTPUT"
              echo "zip_path=" >> "$GITHUB_OUTPUT"
              exit 0
            fi
            echo "既未找到 zip 也未找到 apk" >&2
            exit 1
          fi

          ZIP_PATH=$(realpath "$ZIP_PATH")
          echo "zip_path=$ZIP_PATH" >> "$GITHUB_OUTPUT"
          echo "找到 ZIP: $ZIP_PATH"

          # 解压到临时目录
          WORKDIR=$(mktemp -d)
          unzip -q -o "$ZIP_PATH" -d "$WORKDIR"

          # 优先匹配 NeriPlayer-*.apk，若无则取最大的 .apk（避免 \n 造成 YAML 折行，改用 stat）
          APK=""
          APK=$(find "$WORKDIR" -type f -name 'NeriPlayer-*.apk' -exec stat -c '%s %n' {} + | sort -nr | head -n1 | cut -d' ' -f2- || true)
          if [ -z "$APK" ]; then
            APK=$(find "$WORKDIR" -type f -name '*.apk' -exec stat -c '%s %n' {} + | sort -nr | head -n1 | cut -d' ' -f2- || true)
          fi

          if [ -z "$APK" ]; then
            echo "ZIP 内未找到 APK" >&2
            exit 1
          fi

          APK=$(realpath "$APK")
          echo "apk_path=$APK" >> "$GITHUB_OUTPUT"
          echo "解压得到 APK: $APK"

      - name: 上传构建产物（ZIP 与 APK）
        if: steps.fromzip.outputs.apk_path != ''
        uses: actions/upload-artifact@v4
        with:
          name: app-release-bundle
          path: |
            ${{ steps.fromzip.outputs.zip_path }}
            ${{ steps.fromzip.outputs.apk_path }}

      - name: Telegram 通知（优先发 APK，失败就发 ZIP）
        if: steps.fromzip.outputs.apk_path != ''
        env:
          TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          APK_PATH: ${{ steps.fromzip.outputs.apk_path }}
          ZIP_PATH: ${{ steps.fromzip.outputs.zip_path }}
          SHA: ${{ github.sha }}
          REPO: ${{ github.repository }}
          ACTOR: ${{ github.actor }}
          BRANCH: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if [ -z "${COMMIT_MSG}" ]; then COMMIT_MSG="$(git log -1 --pretty=%s 2>/dev/null || echo '手动触发构建')"; fi
          commit_url="https://github.com/${REPO}/commit/${SHA}"
          nl=$'\n'
          caption="✅ 构建成功${nl}📦 仓库: ${REPO}${nl}🌿 分支: ${BRANCH}${nl}👤 提交者: ${ACTOR}${nl}📝 提交信息: ${COMMIT_MSG}${nl}🔗 提交详情: ${commit_url}"

          APK_NAME=$(basename "$APK_PATH")
          set +e
          curl -sS --fail-with-body -X POST "https://api.telegram.org/bot${TOKEN}/sendDocument"             -F chat_id="${CHAT_ID}"             -F "document=@-;filename=${APK_NAME};type=application/vnd.android.package-archive"             -F caption="${caption}" < "$APK_PATH"
          rc=$?
          set -e
          if [ $rc -ne 0 ]; then
            echo "发送 APK 失败，尝试发送 ZIP …"
            if [ -n "$ZIP_PATH" ] && [ -f "$ZIP_PATH" ]; then
              curl -sS --fail-with-body -X POST "https://api.telegram.org/bot${TOKEN}/sendDocument"                 -F chat_id="${CHAT_ID}"                 -F "document=@${ZIP_PATH};type=application/zip"                 -F caption="${caption}"
            else
              echo "没有可用的 ZIP，通知失败。" >&2
              exit 1
            fi
          fi

      - name: Telegram 通知失败
        if: failure()
        env:
          TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          SHA: ${{ github.sha }}
          REPO: ${{ github.repository }}
          ACTOR: ${{ github.actor }}
          BRANCH: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          nl=$'\n'
          msg="❌ 构建失败${nl}📦 仓库: ${REPO}${nl}🌿 分支: ${BRANCH}${nl}👤 触发者: ${ACTOR}${nl}🔗 https://github.com/${REPO}/actions/runs/${{ github.run_id }}"
          curl -sS "https://api.telegram.org/bot${TOKEN}/sendMessage"             -d chat_id="${CHAT_ID}"             -d text="${msg}"
