name: Android CI
"on":
  workflow_dispatch:
jobs:
  build:
    if: github.ref == 'refs/heads/7zz'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
      - name: 恢复签名文件
        env:
          KEYSTORE_B64: ${{ secrets.KEYSTORE_B64 }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p app
          echo "$KEYSTORE_B64" | base64 -d > app/neri.jks
          test -s app/neri.jks
      - name: 写入 keystore.properties
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "storeFile=app/neri.jks"
            echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}"
            echo "keyAlias=${{ secrets.KEY_ALIAS }}"
            echo "keyPassword=${{ secrets.KEY_PASSWORD }}"
          } > keystore.properties
      - name: 准备 Gradle
        shell: bash
        run: chmod +x gradlew
      - name: 构建 Release
        env:
          KS_PWD: ${{ secrets.KEYSTORE_PASSWORD }}
          ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PWD: ${{ secrets.KEY_PASSWORD }}
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew clean :app:assembleRelease             -Pandroid.injected.signing.store.file="$PWD/app/neri.jks"             -Pandroid.injected.signing.store.password="$KS_PWD"             -Pandroid.injected.signing.key.alias="$ALIAS"             -Pandroid.injected.signing.key.password="$KEY_PWD"             --stacktrace
      - name: Package APK as zip
        id: pack
        run: |
          set -euo pipefail
          mkdir -p out
          APK_PATH="$(ls -1 app/build/outputs/apk/release/*-*.apk 2>/dev/null | head -n1 || true)"
          if [ -z "${APK_PATH}" ]; then
            echo "No APK found under app/build/outputs/apk/release" >&2
            exit 1
          fi
          ZIP_PATH="out/app-apk.zip"
          rm -f "${ZIP_PATH}"
          zip -j "${ZIP_PATH}" "${APK_PATH}"
          echo "apk_path=${APK_PATH}" >> $GITHUB_OUTPUT
          echo "zip_path=${ZIP_PATH}" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-apk
          path: out/app-apk.zip
          if-no-files-found: error
          compression-level: 9
          retention-days: 7

      - name: Telegram 推送（文件+按钮，带前置校验与详细日志）
        if: ${{ success() }}
        env:
          TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          ZIP_PATH: ${{ steps.pack.outputs.zip_path }}
          APK_PATH: ${{ steps.pack.outputs.apk_path }}
          SHA: ${{ github.sha }}
          REPO: ${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
          RUN_ID: ${{ github.run_id }}
        shell: bash
        run: |
          set -euo pipefail
          API="https://api.telegram.org/bot${TOKEN}"
          SHORT_SHA="${SHA:0:8}"
          RUN_URL="https://github.com/${REPO}/actions/runs/${RUN_ID}"
          ARTIFACT_URL="${RUN_URL}#artifacts"
          echo "ZIP_PATH=${ZIP_PATH:-<empty>}"
          echo "APK_PATH=${APK_PATH:-<empty>}"
          [ -n "${TOKEN:-}" ] || { echo "ERROR: TELEGRAM_TOKEN is empty"; exit 1; }
          [ -n "${CHAT_ID:-}" ] || { echo "ERROR: TELEGRAM_CHAT_ID is empty"; exit 1; }
          if [ -n "${ZIP_PATH:-}" ] && [ -f "${ZIP_PATH}" ]; then
            sz=$(stat -c%s "${ZIP_PATH}" || echo 0)
            echo "Sending ZIP (${sz} bytes)"
            resp=$(curl -sS --fail-with-body               -F chat_id="${CHAT_ID}"               -F parse_mode=HTML               -F "caption=🚀 NeriPlayer ${SHORT_SHA}"               -F "document=@${ZIP_PATH};type=application/zip;filename=app-apk.zip"               "${API}/sendDocument") || { echo "Telegram sendDocument ZIP failed:"; echo "${resp}"; exit 1; }
          elif [ -n "${APK_PATH:-}" ] && [ -f "${APK_PATH}" ]; then
            sz=$(stat -c%s "${APK_PATH}" || echo 0)
            echo "Sending APK (${sz} bytes)"
            resp=$(curl -sS --fail-with-body               -F chat_id="${CHAT_ID}"               -F parse_mode=HTML               -F "caption=🚀 NeriPlayer ${SHORT_SHA}"               -F "document=@${APK_PATH};type=application/vnd.android.package-archive;filename=NeriPlayer-${SHORT_SHA}.apk"               "${API}/sendDocument") || { echo "Telegram sendDocument APK failed:"; echo "${resp}"; exit 1; }
          else
            echo "ERROR: Neither ZIP_PATH nor APK_PATH exists."
            ls -l "${ZIP_PATH:-/dev/null}" 2>/dev/null || true
            ls -l "${APK_PATH:-/dev/null}" 2>/dev/null || true
            exit 1
          fi
          if command -v jq >/dev/null 2>&1; then
            REPLY_MARKUP=$(jq -n --arg a "$ARTIFACT_URL" --arg r "$RUN_URL" '{inline_keyboard:[[{"text":"⬇️ 下载产物","url":$a},{"text":"🔗 查看构建","url":$r}]]}')
          else
            REPLY_MARKUP='{"inline_keyboard":[[{"text":"⬇️ 下载产物","url":"'"$ARTIFACT_URL"'"},{"text":"🔗 查看构建","url":"'"$RUN_URL"'"}]]}'
          fi
          resp2=$(curl -sS --fail-with-body -X POST "${API}/sendMessage"             -d chat_id="${CHAT_ID}"             -d parse_mode=HTML             -d text="📦 构建产物与运行信息"             -d reply_markup="$REPLY_MARKUP") || { echo "Telegram sendMessage failed:"; echo "${resp2}"; exit 1; }
          echo "Telegram buttons sent ok"
