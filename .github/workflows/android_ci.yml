name: Android CI
on:
  workflow_dispatch:
jobs:
  build:
    if: github.ref == 'refs/heads/7zz'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
      - name: 恢复签名文件
        env:
          KEYSTORE_B64: ${{ secrets.KEYSTORE_B64 }}
        run: |
          set -e
          mkdir -p app
          echo "$KEYSTORE_B64" | base64 -d > app/neri.jks
          test -s app/neri.jks
      - name: 写入 keystore.properties
        run: |
          {
            echo "storeFile=app/neri.jks"
            echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}"
            echo "keyAlias=${{ secrets.KEY_ALIAS }}"
            echo "keyPassword=${{ secrets.KEY_PASSWORD }}"
          } > keystore.properties
      - run: chmod +x gradlew
      - name: 构建 Release
        env:
          KS_PWD: ${{ secrets.KEYSTORE_PASSWORD }}
          ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PWD: ${{ secrets.KEY_PASSWORD }}
        run: |
          ./gradlew clean :app:assembleRelease             -Pandroid.injected.signing.store.file="$PWD/app/neri.jks"             -Pandroid.injected.signing.store.password="$KS_PWD"             -Pandroid.injected.signing.key.alias="$ALIAS"             -Pandroid.injected.signing.key.password="$KEY_PWD"             --stacktrace
      - name: 寻找 APK
        id: pick
        run: |
          set -e
          f=$(ls -1 app/build/outputs/apk/*/release/*.apk 2>/dev/null | head -n 1 || true)
          if [ -z "$f" ]; then f=$(find . -type f -name "*.apk" | head -n 1 || true); fi
          echo "apk_path=$f" >> $GITHUB_OUTPUT
      - name: 上传构建产物
        if: steps.pick.outputs.apk_path != ''
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ steps.pick.outputs.apk_path }}
      - name: Telegram 通知成功
        if: steps.pick.outputs.apk_path != ''
        env:
          TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          APK_PATH: ${{ steps.pick.outputs.apk_path }}
          SHA: ${{ github.sha }}
          REPO: ${{ github.repository }}
          ACTOR: ${{ github.actor }}
          BRANCH: ${{ github.ref_name }}
        run: |
          set -e
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if [ -z "${COMMIT_MSG}" ]; then COMMIT_MSG="$(git log -1 --pretty=%s 2>/dev/null || echo '手动触发构建')"; fi
          commit_url="https://github.com/${REPO}/commit/${SHA}"
          nl=$'\n'
          caption="✅ 构建成功${nl}📦 仓库: ${REPO}${nl}🌿 分支: ${BRANCH}${nl}👤 提交者: ${ACTOR}${nl}📝 提交信息: ${COMMIT_MSG}${nl}🔗 提交详情: ${commit_url}"
          curl -sS -X POST "https://api.telegram.org/bot${TOKEN}/sendDocument"             -F chat_id="${CHAT_ID}"             -F document=@"${APK_PATH}"             -F caption="${caption}"
      - name: Telegram 通知失败
        if: failure()
        env:
          TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          SHA: ${{ github.sha }}
          REPO: ${{ github.repository }}
          ACTOR: ${{ github.actor }}
          BRANCH: ${{ github.ref_name }}
        run: |
          nl=$'\n'
          msg="❌ 构建失败${nl}📦 仓库: ${REPO}${nl}🌿 分支: ${BRANCH}${nl}👤 触发者: ${ACTOR}${nl}🔗 https://github.com/${REPO}/actions/runs/${{ github.run_id }}"
          curl -sS "https://api.telegram.org/bot${TOKEN}/sendMessage"             -d chat_id="${CHAT_ID}"             -d text="${msg}"
